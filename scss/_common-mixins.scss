//********* f(x) ************
//STRIP UNITS
//*********************
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

//********** f(x) **********
//COLOR OPACITY
//********************
@function color-opacity($color, $opacity: 1) {
	@return rgba($color, $opacity);
}

//********** f(x) **********
//STRING REPLACE
//********************
@function str-replace($string, $search, $replace) {
	$length: str-length($replace);
	$index: str-index($string, $search);
	$slice: $string;
	@while $index != 0 {
		$slice: str-slice($slice, 0, $index - 1);
		$slice: $slice + $replace;
		$slice: $slice + str-slice($string, $index + $length);
		$index: str-index($slice, $search);
	}
	@return $slice;
}

//********** f(x) **********
//Leading Zeros
//********************
@function addzeros($number, $length) {
    $num: '' + $number;
    @while str-length($num) < $length {
        $num: '0' + $num;
    }
    @return $num;
}

//*********************
//WEB PREFIX
//*********************
//*
//USAGE: @include web-prefix(box-shadow, 5px 5px 5px rgba(0,0,0,0.15));
//*
@mixin web-prefix($property, $value, $value-with-prefix: '') {
	// defining prefixes so we can use them in mixins below
	$prefixes: ("-webkit-", "-ms-", "-o-",  "-moz-", "");
	@each $prefix in $prefixes {
		@if $value-with-prefix == '' {
			#{$prefix}#{$property}: $value;
		}
		@else {
			#{$prefix}#{$property}: #{$prefix}#{$value}; //str-replace($value, $value-with-prefix, $prefix + $value-with-prefix);
		}
	}
}


//***************************** Background ***************************//
// URL: http://www.sitepoint.com/building-linear-gradient-mixin-sass/
/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background-color: nth(nth($color-stops, 1), 1);
  background-image: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background-image: linear-gradient($direction, $color-stops);
}